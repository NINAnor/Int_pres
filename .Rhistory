Zbird <- birddata[[3]]
Approach <- ifelse(abs(rad(winddata[[2]])-rad(birddata[[2]])-rad(180))>pi,2*pi-abs(rad(winddata[[2]])-rad(birddata[[2]])-rad(180)),abs(rad(winddata[[2]])-rad(birddata[[2]])-rad(180)))
cosA <- (cos(Approach*2)+1)/2  #relative risk factor of approach
rR <- seq(0.025,0.975,by=0.05)
cC <- 1.209-0.954*rR
cC[which(rR<0.219)] <- 0.305+3.172*rR[which(rR<0.219)]
cC[which(rR<0.085)] <- 0.575
Factor <- (NoBlades*Wingspan)/(2*pi)
Part1 <- Sigma*((cosA*BirdAspectRatio/abs(BirdSpeed*cos(Approach)))+((1-cosA)/WindSpeed))
Part1[which(is.na(Part1))] <- 0
Part2 <- (2*FF/(RotorL+(TTspeed/Sigma)))*(cosA+((1-cosA)*(BirdAspectRatio+(BirdSpeed*(sin(Approach))*sign(ifelse(Zhub-Zbird==0,1,Zhub-Zbird))/WindSpeed))))
Part2[which(is.na(Part2))] <- 0
Dim1 <- NoBlades/(pi*(RotorL^2-(TTspeed/Sigma)^2))
Dim2 <- rep(NA,length(BirdSpeed))
for(b in 1:length(BirdSpeed)){
Dim2t1 <- (MaxChord*cC)*(cos(rad(Pitch))-rR*RotorL*Sigma/(BirdSpeed[b]*cos(Approach[b]))*sin(rad(Pitch)))*(cosA[b])
Dim2t1[which(is.na(Dim2t1))] <- 0
Dim2t2 <- (MaxChord*cC)*(rR*RotorL*Sigma/(BirdSpeed[b]*(sin(Approach[b])+1e-17))*cos(rad(Pitch))-sin(rad(Pitch)))*(1-cosA[b])
Dim2t2[which(is.na(Dim2t2))] <- 0
Dim2[b] <- K*Dim1*sum(diff(c(0,rR))*rR*(Dim2t1+Dim2t2)*2)
}
P <- Factor*(Part1+Part2)+Dim2
P[which(BirdSpeed==0)] <- 0
P[which(P>1)] <- 1
P[which(P<0)] <- 0
P
}
turb <- list(hub=70,Nrotor=3,Lrotor=40,maxChord=3.296,pitch=10,induction=0.25,TTspeed=25)
winddata <- list(speed=5,direction=0)
dirvar <- seq(-180,180,by=1)
#dirvar <- 90
birddata <- list(speed=rep(10,length(dirvar)),direction=dirvar,altitude=rep(70,length(dirvar)))
gears <- list(wind=c(3,6,25),rpm=c(1,11,16))
shape <- list(length=0.8,span=2.315,flight=1)
dims <- 0
PP <- hitPT(turb=turb,gears=gears,wind=winddata,bird=birddata,shape=shape,dims=dims)
PP
range(PP)
pi
rad
rad()
hitPT <- function(turb,gears,winddata,birddata,shape,dims){
#library(circular)
#library(MASS)
K <- ifelse(exists("dims"),dims,0) # 1D (=0) or 3D (=1)
Zhub <- turb[[1]]
NoBlades <- turb[[2]]
RotorL <- turb[[3]]   # m
MaxChord <- turb[[4]] # m
Pitch <- turb[[5]]    # degrees
TTspeed <- turb[[7]]  # m/s: tangential threshold speed
WindSpeed <- wind[[1]]*(1-turb[[6]])    # wind speed reduction using the axial induction factor
WindSpeed[WindSpeed==0] <- 0.01
Gw <- gears[[1]]
Gg <- gears[[2]]
RPP <- WindSpeed
for (a in 1:length(Gw)){
RPP[which(wind[[1]]<=Gw[length(Gw)+1-a])] <- Gg[length(Gg)+1-a]
}
RPP[which(wind[[1]]>Gw[a])] <- 0
Sigma <- (RPP/60)*2*pi
BirdLength <- shape[[1]] #m
Wingspan <- shape[[2]] #m
BirdAspectRatio <- BirdLength/Wingspan  # turned around from Tucker = 1/A
FF <- ifelse(shape[[3]]==1,2/pi,1) #flapping=0, gliding=1
BirdSpeed <- birddata[[1]]
Zbird <- birddata[[3]]
Approach <- ifelse(abs(rad(winddata[[2]])-rad(birddata[[2]])-rad(180))>pi,2*pi-abs(rad(winddata[[2]])-rad(birddata[[2]])-rad(180)),abs(rad(winddata[[2]])-rad(birddata[[2]])-rad(180)))
cosA <- (cos(Approach*2)+1)/2  #relative risk factor of approach
rR <- seq(0.025,0.975,by=0.05)
cC <- 1.209-0.954*rR
cC[which(rR<0.219)] <- 0.305+3.172*rR[which(rR<0.219)]
cC[which(rR<0.085)] <- 0.575
Factor <- (NoBlades*Wingspan)/(2*pi)
Part1 <- Sigma*((cosA*BirdAspectRatio/abs(BirdSpeed*cos(Approach)))+((1-cosA)/WindSpeed))
Part1[which(is.na(Part1))] <- 0
Part2 <- (2*FF/(RotorL+(TTspeed/Sigma)))*(cosA+((1-cosA)*(BirdAspectRatio+(BirdSpeed*(sin(Approach))*sign(ifelse(Zhub-Zbird==0,1,Zhub-Zbird))/WindSpeed))))
Part2[which(is.na(Part2))] <- 0
Dim1 <- NoBlades/(pi*(RotorL^2-(TTspeed/Sigma)^2))
Dim2 <- rep(NA,length(BirdSpeed))
for(b in 1:length(BirdSpeed)){
Dim2t1 <- (MaxChord*cC)*(cos(rad(Pitch))-rR*RotorL*Sigma/(BirdSpeed[b]*cos(Approach[b]))*sin(rad(Pitch)))*(cosA[b])
Dim2t1[which(is.na(Dim2t1))] <- 0
Dim2t2 <- (MaxChord*cC)*(rR*RotorL*Sigma/(BirdSpeed[b]*(sin(Approach[b])+1e-17))*cos(rad(Pitch))-sin(rad(Pitch)))*(1-cosA[b])
Dim2t2[which(is.na(Dim2t2))] <- 0
Dim2[b] <- K*Dim1*sum(diff(c(0,rR))*rR*(Dim2t1+Dim2t2)*2)
}
P <- Factor*(Part1+Part2)+Dim2
P[which(BirdSpeed==0)] <- 0
P[which(P>1)] <- 1
P[which(P<0)] <- 0
P
}
require(circular)
PP <- hitPT(turb=turb,gears=gears,wind=winddata,bird=birddata,shape=shape,dims=dims)
dims
turb <- list(hub=70,Nrotor=3,Lrotor=40,maxChord=3.296,pitch=10,induction=0.25,TTspeed=25)
winddata <- list(speed=5,direction=0)
dirvar <- seq(-180,180,by=1)
#dirvar <- 90
birddata <- list(speed=rep(10,length(dirvar)),direction=dirvar,altitude=rep(70,length(dirvar)))
gears <- list(wind=c(3,6,25),rpm=c(1,11,16))
shape <- list(length=0.8,span=2.315,flight=1)
dims <- 0
PP <- hitPT(turb=turb,gears=gears,wind=winddata,bird=birddata,shape=shape,dims=dims)
q()
library(RPostgreSQL)
q()
shiny::runApp('M:/My Documents/Projects/Naturindeks/shiny/humle_sommerf')
shiny::runApp('M:/My Documents/Projects/Naturindeks/shiny/humle_sommerf')
require(RPostgreSQL)
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv,dbname="gisdata",user="ninjea",
password="jensgis",host="ninsrv16.nina.no")
create.schema<-"CREATE SCHEMA seatrack
AUTHORIZATION ninjea;
GRANT ALL ON SCHEMA seatrack TO ninjea;
GRANT USAGE ON SCHEMA seatrack TO gisuser;
ALTER DEFAULT PRIVILEGES IN SCHEMA seatrack
GRANT SELECT ON TABLES
TO gisuser;
"
dbSendQuery(con,create.schema)
con<-dbConnect(drv,dbname="gisdata",user="ninjea",
password="jensgis",host="ninsrv16.nina.no")
dbSendQuery(con,create.schema)
create.usergroup<-"
CREATE ROLE seatrack_user
VALID UNTIL 'infinity';
GRANT gisuser TO seatrack_user;
"
dbSendQuery(con,create.usergroup)
create.schema<-"CREATE SCHEMA seatrack
AUTHORIZATION ninjea;
GRANT ALL ON SCHEMA seatrack TO ninjea;
GRANT USAGE, CREATE ON SCHEMA seatrack TO seatrack_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA seatrack
GRANT SELECT, INSERT, UPDATE, REFERENCES, TRIGGER, CREATE ON TABLES
TO seatrack_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA seatrack
GRANT SELECT ON TABLES
TO gisuser;
"
dbSendQuery(con,create.schema)
create.schema<-"CREATE SCHEMA seatrack
AUTHORIZATION ninjea;
GRANT ALL ON SCHEMA seatrack TO ninjea;
GRANT USAGE, CREATE ON SCHEMA seatrack TO seatrack_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA seatrack
GRANT SELECT, INSERT, UPDATE, REFERENCES, TRIGGER ON TABLES
TO seatrack_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA seatrack
GRANT SELECT ON TABLES
TO gisuser;
"
dbSendQuery(con,create.schema)
?`dbExistsTable-methods`
?dbRemoveTable()
?dbRemoveTable
q()
q()
q()
shiny::runApp('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres')
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
sample(10)
?sample
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
Sys.time()
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
?paste
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
q()
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
paste(sep="<br/", "<br> No Data! </br>", "Change data subset")
Sys.time() -5
Sys.time() -55
Sys.time() -5
Sys.time()-5
Sys.time()
?Sys.time
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
Sys.Date() -5
Sys.Date() -55
Sys.Date() -365
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
rm(fetch.q)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
dbClearResult(res)
conn<-dbConnect(drv,dbname="gisdata",host="ninsrv16.nina.no",user="borge.moe",password="borge")
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
dbListConnections(PostgreSQL())
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
?pageWithSidebar
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
?column
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
?suppressWarnings
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
?renderUI
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
?iconv
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
conn<-dbConnect(drv,dbname="gisdata",host="ninsrv16.nina.no",user="borge.moe",password="borge")
drv<-("PostgreSQL")
conn<-dbConnect(drv,dbname="gisdata",host="ninsrv16.nina.no",user="borge.moe",password="borge")
cat.query<-"
SELECT DISTINCT(species) as species_cat
FROM seatrack.postable
"
res<-dbSendQuery(conn, cat.query)
categories<-fetch(res,-1)
categories
str(categories)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
sessionInfo()
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
drv<-("PostgreSQL")
for(con in dbListConnections(PostgreSQL())){ dbDisconnect(con)}
conn<-dbConnect(drv,dbname="gisdata",host="ninsrv16.nina.no",user="borge.moe",password="borge")
#conn<-dbConnect(drv,dbname="gisdata",host="ninsrv16.nina.no",user="postgjest",password="gjestpost")
cat.query<-"SELECT DISTINCT(species) as species_cat
FROM seatrack.postable"
suppressWarnings(res<-dbSendQuery(conn, cat.query))
categories<-fetch(res,-1)
dbClearResult(res)
categories
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
?renderUI
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
sessionInfo()
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
rm(list=ls())
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
?as.character
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
?iconv
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
?renderUI
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
species_cat<-function(){
drv<-("PostgreSQL")
for(con in dbListConnections(PostgreSQL())){ dbDisconnect(con)}
con<-dbConnect(drv,dbname="gisdata",host="ninsrv16.nina.no",user="borge.moe",password="borge")
#conn<-dbConnect(drv,dbname="gisdata",host="ninsrv16.nina.no",user="postgjest",password="gjestpost")
cat.query<-"SELECT DISTINCT(species) as species_cat
FROM seatrack.postable
"
suppressWarnings(res<-dbSendQuery(con, cat.query))
categories<-fetch(res,-1)
dbClearResult(res)
categories
}
species_cat()
as.list(species_cat())
as.character(species_cat())
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
?Encoding
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
enc2utf8(as.character(species_cat()))
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
sessionInfo()
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('M:/My Documents/Projects/Seatrack/shiny/shiny_postgres/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('~/Projects/Seatrack/shiny/shiny_seatrack/seatrack.R', echo=TRUE)
source('~/Projects/Seatrack/shiny/shiny_seatrack/seatrack.R', encoding = 'UTF-8', echo=TRUE)
source('~/Projects/Seatrack/shiny/shiny_seatrack/seatrack.R', encoding = 'UTF-8', echo=TRUE)
-4484+1902-10914-13667-13799-24926-13384-32855-18146
100*100
130273/1000
q()
library(stringi)
sessionInfo()
install.packages("stringi")
q()
palette
palette()
?palette
rainbow()
rainbow(5)
rainbow
library(RColorBrewer)
?RColowBrewer
??RColowBrewer
brewer.pal.info()
brewer.pal.info
display.brewer.all()
brewer.pal(5,"Set2")
brewer.pal
shiny::runApp('~/temp/shiny/shiny_test')
require(knitr)
?kable
?xtable
require(xtable)
?xtable
m<-diag(7)
xtable(m)
print(xtable(m), comments=F)
kable(m)
?normalizePath
?path.expand()
NinaR::nina_slidy
tt<-NinaR::nina_slidy
grep("figure-slidy", tt)
tt
as.character(tt)
?normalizePath
?expand.path
?path.expand
require(rmarkdown)
rmarkdown::slidy_presentation()
rmarkdown::slidy_presentation
rmarkdown::slidy_presentation()
q()
devtools::install_github("NINAnor/NinaR")
devtools::install_github("NINAnor/NinaR", dep=T)
devtools::install_github("NINAnor/NinaR", dep=T, force=T)
?NinaR
??NinaR
help("NinaR")
help(package=NinaR)
q()
mod<-glm(1:10~1:10*rnorm(10,0,2))
y<-1:10
x<-1:10*rnorm(10,0,2)
mod<-glm(y~x)
summary(mod)
summary(mod)$coefficients
print(xtable(summary(mod)$coefficients), comments=F)
require(xtable)
print(xtable(summary(mod)$coefficients), comments=F)
print(xtable(summary(mod)$coefficients), comment=F)
kable(summary(mod)$coefficients)
rmarkdown::kable(summary(mod)$coefficients))
rmarkdown::kable(summary(mod)$coefficients)
kable
??kable
require(rmarkdown)
??kable
kable
require(knitr)
require(knitr)
kable(summary(mod)$coefficients)
kable(round(summary(mod)$coefficients, digits=3))
summary(mod)
y<-1:100
x<-1:100*rnorm(100,0,2)
mod<-glm(y~x)
summary(mod)
kable(round(summary(mod)$coefficients, digits=3))
print(xtable(summary(mod)$coefficients), comment=Fm type="html")
print(xtable(summary(mod)$coefficients), comment=F, type="html")
?install.packages
q()
q()
1*0.002
1*0.002
1/0.002
q()
shinyAppDir("kursapp", options=list("height"=1000))
library(shiny)
shinyAppDir("kursapp", options=list("height"=1000))
dir()
setwd("M:/My Documents/Projects/INTEGRATE/Int_pres")
dir()
shinyAppDir("kursapp", options=list("height"=1000))
install.packages("Distance")
shinyAppDir("kursapp", options=list("height"=1000))
getwd()
?includeHTML
?relative_to()
?relative_to(getwd(), "kursapp/testpage.html")
relative_to(getwd(), "kursapp/testpage.html")
getwd()
